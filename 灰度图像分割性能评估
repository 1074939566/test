import cv2
import os
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, jaccard_score

# 定义处理图片的文件夹路径
folder_path = "./d1"  # 本地的 d1 文件夹路径

# 获取文件夹中的所有图片文件
image_files = [f for f in os.listdir(folder_path) if f.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff'))]
large_test_set = image_files[:500] if len(image_files) > 500 else image_files  # 大量图片（最多 500 张）

# 分割方法
def global_threshold_segmentation(image):
    """
    全局阈值分割
    """
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, global_thresh = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)
    return global_thresh

def adaptive_mean_segmentation(image):
    """
    自适应均值分割
    """
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    adaptive_thresh_mean = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)
    return adaptive_thresh_mean

def adaptive_gaussian_segmentation(image):
    """
    自适应高斯分割
    """
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    adaptive_thresh_gaussian = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    return adaptive_thresh_gaussian

# 模拟真实标签（在实际场景中需要提供真实标签）
def generate_mock_labels(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, true_labels = cv2.threshold(gray_image, 120, 255, cv2.THRESH_BINARY)  # 假设 120 为真实分割阈值
    return true_labels

# 评估性能
def evaluate_segmentation_performance(image_set, segmentation_method, method_name):
    accuracies, precisions, recalls, f1_scores, ious = [], [], [], [], []

    for image_file in image_set:
        image_path = os.path.join(folder_path, image_file)
        image = cv2.imread(image_path)

        if image is None:
            print(f"无法读取文件: {image_file}")
            continue

        # 执行分割
        segmented_image = segmentation_method(image)
        true_labels = generate_mock_labels(image)

        # 将图像展平为 1D
        y_true = true_labels.flatten() // 255
        y_pred = segmented_image.flatten() // 255

        # 计算指标
        accuracies.append(accuracy_score(y_true, y_pred))
        precisions.append(precision_score(y_true, y_pred, zero_division=0))
        recalls.append(recall_score(y_true, y_pred, zero_division=0))
        f1_scores.append(f1_score(y_true, y_pred, zero_division=0))
        ious.append(jaccard_score(y_true, y_pred, zero_division=0))

    # 输出平均指标
    print(f"方法: {method_name}")
    print(f"平均准确率 (Accuracy): {np.mean(accuracies):.4f}")
    print(f"平均精确率 (Precision): {np.mean(precisions):.4f}")
    print(f"平均召回率 (Recall): {np.mean(recalls):.4f}")
    print(f"平均 F1 分数 (F1-Score): {np.mean(f1_scores):.4f}")
    print(f"平均 IoU (Intersection over Union): {np.mean(ious):.4f}")
    print("-" * 50)

# 运行评估
print("开始评估大量图片的分割性能...\n")

# 全局阈值分割
evaluate_segmentation_performance(large_test_set, global_threshold_segmentation, "全局阈值分割")

# 自适应均值分割
evaluate_segmentation_performance(large_test_set, adaptive_mean_segmentation, "自适应均值分割")

# 自适应高斯分割
evaluate_segmentation_performance(large_test_set, adaptive_gaussian_segmentation, "自适应高斯分割")
